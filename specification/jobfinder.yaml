swagger: '2.0'

info:
  version: "0.0.1"
  title: JobFinder
  
consumes: 
  - application/json
produces:
  - application/json

definitions:
  employer:
    type: object
    required:
      - id
      - name
      - info
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      info:
        type: string
  newEmployer:
    type: object
    required:
      - name
    properties:
      name:
        type: string
  employee:
    type: object
    required:
      - id
      - name
      - info
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      info:
        type: string 
  newEmployee:
    type: object
    required:
      - name
    properties:
      name:
        type: string  
  workPosition:
    type: object
    required:
      - id
      - name
      - company
      - money
      - availability
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      company:
        type: string
      money: 
        type: number
        format: float
      availability:
        type: boolean
  newWorkPosition:
    type: object
    required:
      - name
      - company
      - money
    properties:
      name:
        type: string
      company:
        type: string
      money: 
        type: number
        format: float
  submit:
    type: object
    properties:
      id:
        type: integer
        format: int64
      qty: 
        type: integer
      employer:
        $ref: '#/definitions/employer'
      employee:
        $ref: '#/definitions/employee'
      product:
        $ref: '#/definitions/workPosition'
      finalPrice:
        type: number
        format: float
  category:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  newCategory:
    type: object
    required:
      - name
    properties:
      name:
        type: string
  employerApplication:
    type: object
    required:
      - id
      - name
      - info
      - deleted
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      info:
        type: string
      deleted:
        type: boolean
  newEmployerApplication:
    type: object
    required:
      - name
      - info
    properties:
      name:
        type: string
      info:
        type: string
  employeeApplication:
    type: object
    required:
      - id
      - name
      - deleted
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      deleted:
        type: boolean
  newEmployeeApplication:
    type: object
    required:
      - name
    properties:
      name:
        type: string
  question:
    type: object
    required:
      - id
      - text
      - email
    properties:
      id:
        type: integer
        format: int64
      text:
        type: string
      email:
        type: string
  newQuestion:
    type: object
    required:
      - text
    properties:
      text:
        type: string
  tag:
    type: object
    required:
      - id
      - text
    properties:
      id:
        type: integer
        format: int64
      text:
        type: string
  newTag:
    type: object
    required:
      - text
    properties:
      text:
        type: string
  employerRecoveryBasket:
    type: object
    required:
      - id
      - name
      - employerApplication
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      employerApplication: 
        type: string
  newEmployerRecoveryBasket:
    type: object
    required:
      - name
      - employerApplication
    properties:
      name:
        type: string
      employerApplication:
        type: string
  employeeRecoveryBasket:
    type: object
    required:
      - id
      - name
      - employeeApplication
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      employeeApplication:
        type: string
  newEmployeeRecoveryBasket:
    type: object
    required:
      - name
      - employeeApplication
    properties:
      name:
        type: string
      employeeApplication:
        type: string
# Last but not least the parameters can be defined in the path, in the body or
# in the query
paths:
  /employers:
    get:
      description: Gets all the employers
      parameters:
        - name: _sort
          in: query
          required: false
          type: string
        - name: _order
          in: query
          required: false
          type: string
      responses:
        200:
          description: employers succesfully retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/employer'
    post:
      description: Create a new employer
      operationId: addEmployer
      parameters:
        - name: employer
          in: body
          required: true
          description: employer to add to the service
          schema:
            $ref: '#/definitions/newEmployer'
      responses:
        201:
          description: employer created
  /employers/{erid}:
    parameters:
      - name: erid
        in: path
        required: true
        type: integer
        format: int64
    get:
      description: Get a employer with *erid*
      responses:
        200:
          description: employer succesfully retrieved
          schema:
            $ref: '#/definitions/employer'
        404:
          description: employer not found
    delete:
      description: Delete a employer with *erid*
      responses:
        200:
          description: employer deleted 
          schema:
            $ref: '#/definitions/employer'
        404:
          description: employer not found
    put:
      description: Update a employer with *erid*
      operationId: updateEmployer
      parameters:
        - name: employer
          in: body
          required: true
          description: Updates
          schema:
            $ref: '#/definitions/newEmployer'
      responses:
        200:
          description: employer updated
          schema:
            $ref: '#/definitions/employer'
        404:
          description: employer not found
  /employees:
    get:
      description: Gets all the employees
      parameters:
        - name: _sort
          in: query
          required: false
          type: string
        - name: _order
          in: query
          required: false
          type: string
      responses:
        200:
          description: employees succesfully retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/employee'
    post:
      description: Create a new employee
      operationId: addEmployee
      parameters:
        - name: employee
          in: body
          required: true
          description: employee to add to the service
          schema:
            $ref: '#/definitions/newEmployee'
      responses:
        201:
          description: employee created
  /employees/{eeid}:
    parameters:
      - name: eeid
        in: path
        required: true
        type: integer
        format: int64
    get:
      description: Get a employer with *eeid*
      responses:
        200:
          description: employee succesfully retrieved
          schema:
            $ref: '#/definitions/employee'
        404:
          description: employee not found
    delete:
      description: Delete a employee with *eeid*
      responses:
        200:
          description: employee deleted 
          schema:
            $ref: '#/definitions/employee'
        404:
          description: employer not found
    put:
      description: Update a employee with *eeid*
      operationId: updateEmployee
      parameters:
        - name: employee
          in: body
          required: true
          description: Updates
          schema:
            $ref: '#/definitions/newEmployee'
      responses:
        200:
          description: employee updated
          schema:
            $ref: '#/definitions/employee'
        404:
          description: employee not found
  /workPositions:
    get:
      description: Gets all the workPositions
      parameters:
        - name: workPosition
          in: query
          required: false
          type: string
      responses:
        200:
          description: workPositions succesfully retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/workPosition'
    post:
      description: Create a new workPositions
      operationId: addWorkPositions
      parameters:
        - name: workPosition
          in: body
          required: true
          description: workPositions to add to the service
          schema:
            $ref: '#/definitions/newWorkPosition'
      responses:
        201:
          description: workPosition created
  /workPositions/{wid}:
    parameters:
      - name: wid
        in: path
        required: true
        type: integer
        format: int64
    get:
      description: Get a workPosition with *wid*
      responses:
        200:
          description: workPosition succesfully retrieved
          schema:
            $ref: '#/definitions/workPosition'
        404:
          description: workPosition not found
    delete:
      description: Delete a workPosition with *wid*
      responses:
        200:
          description: workPosition deleted 
          schema:
            $ref: '#/definitions/workPosition'
        404:
          description: workPosition not found
    put:
      description: Update a workPosition with *wid*
      operationId: updateWorkPosition
      parameters:
        - name: workPosition
          in: body
          required: true
          description: Updates
          schema:
            $ref: '#/definitions/newWorkPosition'
      responses:
        200:
          description: workPosition updated
          schema:
            $ref: '#/definitions/workPosition'
        404:
          description: workPosition not found
  /submits:
    get:
      description: Gets all the submits
      parameters:
        - in: query
          name: _expand
          description: Expand to employers and employees
          required: false
          type: string
      responses:
        200:
          description: submits succesfully retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/submit'
  /categories:
    get:
      description: Gets all the categories
      parameters:
        - name: category
          in: query
          required: false
          type: string
      responses:
        200:
          description: categories succesfully retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/category'
    post:
      description: Create a new category
      operationId: addCategory
      parameters:
        - name: category
          in: body
          required: true
          description: category to add to the service
          schema:
            $ref: '#/definitions/newCategory'
      responses:
        201:
          description: category created
  /categories/{cid}:
    parameters:
      - name: cid
        in: path
        required: true
        type: integer
        format: int64
    get:
      description: Get a category with *cid*
      responses:
        200:
          description: category succesfully retrieved
          schema:
            $ref: '#/definitions/category'
        404:
          description: category not found
    delete:
      description: Delete a category with *cid*
      responses:
        200:
          description: category deleted 
          schema:
            $ref: '#/definitions/category'
        404:
          description: category not found
    put:
      description: Update a category with *cid*
      operationId: updateCategory
      parameters:
        - name: category
          in: body
          required: true
          description: Updates
          schema:
            $ref: '#/definitions/newCategory'
      responses:
        200:
          description: category updated
          schema:
            $ref: '#/definitions/category'
        404:
          description: category not found
  /employerApplications:
    get:
      description: Gets all the employerApplications
      parameters:
        - name: employerApplication
          in: query
          required: false
          type: string
      responses:
        200:
          description: employerApplications succesfully retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/employerApplication'
    post:
      description: Create a new employerApplication
      operationId: addEmployerApplication
      parameters:
        - name: employerApplication
          in: body
          required: true
          description: employerApplications to add to the service
          schema:
            $ref: '#/definitions/newEmployerApplication'
      responses:
        201:
          description: employerApplication created
  /employer/{erid}/employerApplications/{eraid}:
    parameters:
      - name: eraid
        in: path
        required: true
        type: integer
        format: int64
      - name: erid
        in: path
        required: true
        type: integer
        format: int64
    get:
      description: Get a employerApplication with *eraid* from employee with *erid*
      responses:
        200:
          description: employerApplication succesfully retrieved
          schema:
            $ref: '#/definitions/employerApplication'
        404:
          description: employerApplication not found
    delete:
      description: Delete a employerApplication with *eraid* from employer with *erid*
      responses:
        200:
          description: employerApplication deleted 
          schema:
            $ref: '#/definitions/employerApplication'
        404:
          description: employerApplication not found
    put:
      description: Update a employerApplication with *eraid* from employer with *erid*
      operationId: updateEmployerApplication
      parameters:
        - name: employerApplication
          in: body
          required: true
          description: Updates
          schema:
            $ref: '#/definitions/newEmployerApplication'
      responses:
        200:
          description: employerApplication updated
          schema:
            $ref: '#/definitions/employerApplication'
        404:
          description: employerApplication not found
  /employeeApplications:
    get:
      description: Gets all the employeeApplications
      parameters:
        - name: employeeApplication
          in: query
          required: false
          type: string
      responses:
        200:
          description: employeeApplications succesfully retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/employeeApplication'
    post:
      description: Create a new employeeApplication
      operationId: addEmployeeApplication
      parameters:
        - name: employeeApplication
          in: body
          required: true
          description: employeeApplications to add to the service
          schema:
            $ref: '#/definitions/newEmployeeApplication'
      responses:
        201:
          description: employeeApplication created
  /employee/{eeid}/employeeApplications/{eeaid}:
    parameters:
      - name: eeaid
        in: path
        required: true
        type: integer
        format: int64
      - name: eeid
        in: path
        required: true
        type: integer
        format: int64
    get:
      description: Get a employeeApplication with *eeaid* from employee with *eeid*
      responses:
        200:
          description: employeeApplication succesfully retrieved
          schema:
            $ref: '#/definitions/employeeApplication'
        404:
          description: employeeApplication not found
    delete:
      description: Delete a employeeApplication with *eeaid* from employee with *eeid*
      responses:
        200:
          description: employeeApplication deleted 
          schema:
            $ref: '#/definitions/employeeApplication'
        404:
          description: employeeApplication not found
    put:
      description: Update a employeeApplication with *eeaid* from employee with *eeid*
      operationId: updateEmployeeApplication
      parameters:
        - name: employeeApplication
          in: body
          required: true
          description: Updates
          schema:
            $ref: '#/definitions/newEmployeeApplication'
      responses:
        200:
          description: employeeApplication updated
          schema:
            $ref: '#/definitions/employeeApplication'
        404:
          description: employeeApplication not found
  /questions:
    get:
      description: Gets all the questions
      parameters:
        - name: _sort
          in: query
          required: false
          type: string
        - name: _order
          in: query
          required: false
          type: string
      responses:
        200:
          description: questions succesfully retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/question'
    post:
      description: Create a new question
      operationId: addQuestion
      parameters:
        - name: question
          in: body
          required: true
          description: question to add to the service
          schema:
            $ref: '#/definitions/newQuestion'
      responses:
        201:
          description: question created
  /employee/{eeid}/questions/{qid}:
    parameters:
      - name: qid
        in: path
        required: true
        type: integer
        format: int64
      - name: eeid
        in: path
        required: true
        type: integer
        format: int64
    get:
      description: Get a question with *qid* from employee with *eeid*
      responses:
        200:
          description: question succesfully retrieved
          schema:
            $ref: '#/definitions/question'
        404:
          description: question not found
    delete:
      description: Delete a question with *qid* from employee with *eeid*
      responses:
        200:
          description: question deleted 
          schema:
            $ref: '#/definitions/question'
        404:
          description: question not found
  /tags:
    get:
      description: Gets all the tags
      parameters:
        - name: _sort
          in: query
          required: false
          type: string
        - name: _order
          in: query
          required: false
          type: string
      responses:
        200:
          description: tags succesfully retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/tag'
    post:
      description: Create a new tags
      operationId: addTag
      parameters:
        - name: tag
          in: body
          required: true
          description: tag to add to the service
          schema:
            $ref: '#/definitions/newTag'
      responses:
        201:
          description: tag created
  /workPositions/{wid}/tags/{tid}:
    parameters:
      - name: tid
        in: path
        required: true
        type: integer
        format: int64
      - name: wid
        in: path
        required: true
        type: integer
        format: int64
    get:
      description: Get a tag with *tid* from workPosition with *wid*
      responses:
        200:
          description: tag succesfully retrieved
          schema:
            $ref: '#/definitions/tag'
        404:
          description: tag not found
    delete:
      description: Delete a tag with *tid* from workPosition with *wid*
      responses:
        200:
          description: tag deleted 
          schema:
            $ref: '#/definitions/tag'
        404:
          description: tag not found
    put:
      description: Update a tag with *tid* from workPosition with *wid*
      operationId: updateTag
      parameters:
        - name: tag
          in: body
          required: true
          description: Updates
          schema:
            $ref: '#/definitions/newTag'
      responses:
        200:
          description: tag updated
          schema:
            $ref: '#/definitions/tag'
        404:
          description: tag not found
  /employerRecoveryBaskets:
    get:
      description: Gets all the employerRecoveryBaskets
      parameters:
        - name: employerRecoveryBasket
          in: query
          required: false
          type: string
      responses:
        200:
          description: employerRecoveryBaskets succesfully retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/employerRecoveryBasket'
    post:
      description: Create a new employerRecoveryBasket
      operationId: addEmployerRecoveryBasket
      parameters:
        - name: employerRecoveryBasket
          in: body
          required: true
          description: employerRecoveryBasket to add to the service
          schema:
            $ref: '#/definitions/newEmployerRecoveryBasket'
      responses:
        201:
          description: employerRecoveryBasket created
  /employer/{erid}/employerRecoveryBaskets/{errbid}:
    parameters:
      - name: errbid
        in: path
        required: true
        type: integer
        format: int64
      - name: erid
        in: path
        required: true
        type: integer
        format: int64
    get:
      description: Get a employerRecoveryBasket with *errbid* from employer with *erid*
      responses:
        200:
          description: employerRecoveryBasket succesfully retrieved
          schema:
            $ref: '#/definitions/employerRecoveryBasket'
        404:
          description: employerRecoveryBasket not found
    delete:
      description: Delete a employerRecoveryBaskets with *errbid* from employer with *erid*
      responses:
        200:
          description: employerRecoveryBasket deleted 
          schema:
            $ref: '#/definitions/employerRecoveryBasket'
        404:
          description: employerRecoveryBasket not found
    put:
      description: Update a employerRecoveryBasket with *errbid* from employer with *erid*
      operationId: updateEmployerRecoveryBasket
      parameters:
        - name: employerRecoveryBasket
          in: body
          required: true
          description: Updates
          schema:
            $ref: '#/definitions/newEmployerRecoveryBasket'
      responses:
        200:
          description: employerRecoveryBasket updated
          schema:
            $ref: '#/definitions/employerRecoveryBasket'
        404:
          description: employerRecoveryBasket not found
  /employeeRecoveryBaskets:
    get:
      description: Gets all the employeeRecoveryBaskets
      parameters:
        - name: employeeRecoveryBasket
          in: query
          required: false
          type: string
      responses:
        200:
          description: employeeRecoveryBaskets succesfully retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/employeeRecoveryBasket'
    post:
      description: Create a new employeeRecoveryBasket
      operationId: addEmployeeRecoveryBasket
      parameters:
        - name: employeeRecoveryBasket
          in: body
          required: true
          description: employeeRecoveryBasket to add to the service
          schema:
            $ref: '#/definitions/newEmployeeRecoveryBasket'
      responses:
        201:
          description: employeeRecoveryBasket created
  /employee/{eeid}/employeeRecoveryBaskets/{eerbid}:
    parameters:
      - name: eerbid
        in: path
        required: true
        type: integer
        format: int64
      - name: eeid
        in: path
        required: true
        type: integer
        format: int64
    get:
      description: Get a employeeRecoveryBasket with *eerbid* from employee with *eeid*
      responses:
        200:
          description: employeeRecoveryBasket succesfully retrieved
          schema:
            $ref: '#/definitions/employeeRecoveryBasket'
        404:
          description: employeeRecoveryBasket not found
    delete:
      description: Delete a employeeRecoveryBaskets with *eerbid* from employee with *eeid*
      responses:
        200:
          description: employeeRecoveryBasket deleted 
          schema:
            $ref: '#/definitions/employeeRecoveryBasket'
        404:
          description: employeeRecoveryBasket not found
    put:
      description: Update a employeeRecoveryBasket with *eerbid* from employee with *eeid*
      operationId: updateEmployeeRecoveryBasket
      parameters:
        - name: employeeRecoveryBasket
          in: body
          required: true
          description: Updates
          schema:
            $ref: '#/definitions/newEmployeeRecoveryBasket'
      responses:
        200:
          description: employeeRecoveryBasket updated
          schema:
            $ref: '#/definitions/employeeRecoveryBasket'
        404:
          description: employeeRecoveryBasket not found
 

